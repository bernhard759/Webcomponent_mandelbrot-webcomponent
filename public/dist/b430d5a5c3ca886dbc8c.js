let WIDTH,HEIGHT,REAL_RANGE,IMAG_RANGE,REAL_RANGE_LEN,IMAG_RANGE_LEN,MAX_ITERATION_COUNT;function complexNumber(e,t){return{re:e=REAL_RANGE[0]+e/WIDTH*REAL_RANGE_LEN,im:t=IMAG_RANGE[0]+t/HEIGHT*IMAG_RANGE_LEN}}function mandelbrot(e){let t,A,E={re:0,im:0},i=0;do{t={re:Math.pow(E.re,2)-Math.pow(E.im,2),im:2*E.re*E.im},E={re:t.re+e.re,im:t.im+e.im},A=Math.sqrt(Math.pow(E.re,2)+Math.pow(E.im,2)),i+=1}while(A<=2&&i<MAX_ITERATION_COUNT);return{iterations:i,in:A<=2}}function julia(e,t){let A,E,i=0;do{A={re:Math.pow(e.re,2)-Math.pow(e.im,2),im:2*e.re*e.im},e={re:A.re+t.re,im:A.im+t.im},E=Math.sqrt(Math.pow(e.re,2)+Math.pow(e.im,2)),i+=1}while(E<=2&&i<MAX_ITERATION_COUNT);return{iterations:i,in:E<=2}}self.addEventListener("message",(function(e){const{w:t,h:A,realSet:E,imagSet:i,isSettingUp:r,mandel:o,point:N,iterationCount:a}=e.data;if(MAX_ITERATION_COUNT=a,REAL_RANGE=[E[0],E[1]],IMAG_RANGE=[i[0],i[1]],REAL_RANGE_LEN=REAL_RANGE[1]-REAL_RANGE[0],IMAG_RANGE_LEN=IMAG_RANGE[1]-IMAG_RANGE[0],WIDTH=t,HEIGHT=A,!r){const{col:t}=e.data,A=[];for(let e=0;e<HEIGHT;e++)A[e]=o?mandelbrot(complexNumber(t,e)):julia(complexNumber(t,e),N);console.log("Worker "+self.name+"calculated "+t),self.postMessage({name:self.name,col:t,theSets:A})}}));